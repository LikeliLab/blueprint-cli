name: Tag, Build and Release package on Merge to Main
permissions:
 contents: write
on:
  pull_request:
      branches:
          - main  # Adjust the branch name as needed
      types: [closed]

jobs:
  get-python-version:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get python version
        id: get-version
        run: |
          # Read the file, trim whitespace/newlines, and set as output
          echo "version=$(cat .python-version | xargs)" >> $GITHUB_OUTPUT

  tag-release:
    runs-on: ubuntu-latest
    needs: [get-python-version]
    outputs:
        package-version: ${{ steps.get_version.outputs.version }}
    steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Setup Python with Poetry
          uses: ./.github/actions/setup-python-poetry
          with:
            python-version: ${{ needs.get-python-version.outputs.python-version }}

        - name: Configure Git
          run: |
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git config --global user.name "github-actions[bot]"

        - name: Get Version
          id: get_version
          run: |
            VERSION=$(poetry version | cut -d' ' -f2)
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "version=$VERSION" >> $GITHUB_OUTPUT

        - name: Check if tag already exists
          id: check_tag
          run: |
            git fetch --tags  # Ensure we have the latest tags from the remote
            if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
              echo "::error::Tag v${VERSION} already exists on GitHub. Please bump the version in pyproject.toml."
              exit 1
            fi

        - name: Create and push new tag
          if: success()
          run: |
            git tag -a "v${VERSION}" -m "Automated release version v${VERSION}"
            git push origin "v${VERSION}"

  build-and-release:
    runs-on: ubuntu-latest
    needs: [get-python-version, tag-release]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python with Poetry
        uses: ./.github/actions/setup-python-poetry
        with:
          python-version: ${{ needs.get-python-version.outputs.python-version }}

      - name: Build Package
        run: poetry build

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
          tag_name: v${{ needs.tag-release.outputs.package-version }}
          name: Release v${{ needs.tag-release.outputs.package-version }}
          body: "Automated release for v${{ needs.tag-release.outputs.package-version }}"
          draft: false
          prerelease: false